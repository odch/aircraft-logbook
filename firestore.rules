rules_version = '2';

function isAuthed() {
  return request.auth != null;
}

function isOwnUser(user) {
  return isAuthed() && request.auth.uid == user;
}

function isOrgMember(database, organization) {
  return isAuthed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs[organization] != null;
}

function isOrgManager(database, organization) {
  return isAuthed() && 'manager' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs[organization].roles;
}

function isReadonlyOrgUser(organization) {
  return isAuthed() && request.auth.uid == 'readonly' && request.auth.token.organization == organization
}

function affectsOnly(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
}

function affectsNot(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasAny(fields) == false;
}

function hasOnly(fields) {
  return request.resource.data.keys().toSet().hasOnly(fields);
}

function hasNot(fields) {
  return request.resource.data.keys().toSet().hasAny(fields) == false;
}

function isAfterLockDate(database, organization, aircraft, res) {
  let aircraftDoc = get(/databases/$(database)/documents/organizations/$(organization)/aircrafts/$(aircraft));
  return aircraftDoc.data.settings == null
    || aircraftDoc.data.settings.lockDate == null
    || aircraftDoc.data.settings.lockDate.toMillis() < res.data.blockOffTime.toMillis();
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{user} {
      allow read: if isOwnUser(user);
      allow create: if isOwnUser(user) && hasNot(["orgs"]);
      allow update: if isOwnUser(user) && affectsNot(["orgs"]);
    }

    match /aerodromes/{aerodrome} {
      allow read: if isAuthed();
    }

    match /organizations/{organization} {
      allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
      allow update: if isOrgManager(database, organization);

      match /members/{member} {
        allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
        allow create: if isOrgManager(database, organization)
          && hasOnly(["deleted", "firstname", "lastname", "nr", "instructor", "roles", "inviteEmail", "inviteTimestamp", "createdBy", "createTimestamp", "updatedBy", "updateTimestamp"]);
        allow update: if isOrgManager(database, organization)
          && affectsOnly(["deleted", "firstname", "lastname", "nr", "instructor", "roles", "inviteEmail", "inviteTimestamp", "updatedBy", "updateTimestamp", "deletedBy", "deleteTimestamp"]);
      }

      match /aircrafts/{aircraft} {
        allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
        allow create: if isOrgManager(database, organization);
        allow update: if isOrgManager(database, organization) && affectsOnly(["deleted", "settings"]);

        match /flights/{flight} {
          allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);

          allow update: if isOrgMember(database, organization)
            && affectsOnly(["deleted", "deleteTimestamp", "deletedBy"])
            && isAfterLockDate(database, organization, aircraft, resource);
        }

        match /techlog/{entry} {
          allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);

          match /actions/{action} {
            allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
          }
        }

        match /checks/{check} {
          allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
        }
      }

      match /aerodromes/{aerodrome} {
        allow read: if isOrgMember(database, organization) || isReadonlyOrgUser(organization);
        allow create: if isOrgMember(database, organization);
      }
    }
  }
}
